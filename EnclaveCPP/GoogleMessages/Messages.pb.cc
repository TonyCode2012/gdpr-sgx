// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Messages {

namespace {

const ::google::protobuf::Descriptor* SecretMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SecretMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* InitialMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitialMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageMSG0_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageMSG0_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageMSG1_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageMSG1_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageMSG2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageMSG2_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageMSG3_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageMSG3_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttestationMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttestationMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllInOneMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllInOneMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Type_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Messages_2eproto() {
  protobuf_AddDesc_Messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Messages.proto");
  GOOGLE_CHECK(file != NULL);
  SecretMessage_descriptor_ = file->message_type(0);
  static const int SecretMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretMessage, size_),
  };
  SecretMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SecretMessage_descriptor_,
      SecretMessage::default_instance_,
      SecretMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SecretMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SecretMessage));
  InitialMessage_descriptor_ = file->message_type(1);
  static const int InitialMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialMessage, size_),
  };
  InitialMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitialMessage_descriptor_,
      InitialMessage::default_instance_,
      InitialMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitialMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitialMessage));
  MessageMSG0_descriptor_ = file->message_type(2);
  static const int MessageMSG0_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG0, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG0, epid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG0, status_),
  };
  MessageMSG0_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageMSG0_descriptor_,
      MessageMSG0::default_instance_,
      MessageMSG0_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG0, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG0, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageMSG0));
  MessageMSG1_descriptor_ = file->message_type(3);
  static const int MessageMSG1_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG1, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG1, gax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG1, gay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG1, gid_),
  };
  MessageMSG1_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageMSG1_descriptor_,
      MessageMSG1::default_instance_,
      MessageMSG1_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG1, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG1, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageMSG1));
  MessageMSG2_descriptor_ = file->message_type(4);
  static const int MessageMSG2_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, publickeygx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, publickeygy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, quotetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, spid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, cmackdfid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, signaturex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, signaturey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, smac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, sizesigrl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, sigrl_),
  };
  MessageMSG2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageMSG2_descriptor_,
      MessageMSG2::default_instance_,
      MessageMSG2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageMSG2));
  MessageMSG3_descriptor_ = file->message_type(5);
  static const int MessageMSG3_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG3, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG3, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG3, sgxmac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG3, gaxmsg3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG3, gaymsg3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG3, secproperty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG3, quote_),
  };
  MessageMSG3_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageMSG3_descriptor_,
      MessageMSG3::default_instance_,
      MessageMSG3_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG3, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageMSG3, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageMSG3));
  AttestationMessage_descriptor_ = file->message_type(6);
  static const int AttestationMessage_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, epidgroupstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, tcbevaluationstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, pseevaluationstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, latestequivalenttcbpsvn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, latestpseisvsvn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, latestpsdasvn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, performancerekeygid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, ecsign256x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, ecsign256y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, macsmk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, resultsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, reserved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, payloadtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, payload_),
  };
  AttestationMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttestationMessage_descriptor_,
      AttestationMessage::default_instance_,
      AttestationMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttestationMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttestationMessage));
  AllInOneMessage_descriptor_ = file->message_type(7);
  static const int AllInOneMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInOneMessage, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInOneMessage, secretmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInOneMessage, initmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInOneMessage, msg0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInOneMessage, msg1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInOneMessage, msg2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInOneMessage, msg3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInOneMessage, attestmsg_),
  };
  AllInOneMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllInOneMessage_descriptor_,
      AllInOneMessage::default_instance_,
      AllInOneMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInOneMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllInOneMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllInOneMessage));
  Type_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SecretMessage_descriptor_, &SecretMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitialMessage_descriptor_, &InitialMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageMSG0_descriptor_, &MessageMSG0::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageMSG1_descriptor_, &MessageMSG1::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageMSG2_descriptor_, &MessageMSG2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageMSG3_descriptor_, &MessageMSG3::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttestationMessage_descriptor_, &AttestationMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllInOneMessage_descriptor_, &AllInOneMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Messages_2eproto() {
  delete SecretMessage::default_instance_;
  delete SecretMessage_reflection_;
  delete InitialMessage::default_instance_;
  delete InitialMessage_reflection_;
  delete MessageMSG0::default_instance_;
  delete MessageMSG0_reflection_;
  delete MessageMSG1::default_instance_;
  delete MessageMSG1_reflection_;
  delete MessageMSG2::default_instance_;
  delete MessageMSG2_reflection_;
  delete MessageMSG3::default_instance_;
  delete MessageMSG3_reflection_;
  delete AttestationMessage::default_instance_;
  delete AttestationMessage_reflection_;
  delete AllInOneMessage::default_instance_;
  delete AllInOneMessage_reflection_;
}

void protobuf_AddDesc_Messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016Messages.proto\022\010Messages\";\n\rSecretMess"
    "age\022\034\n\004type\030\001 \002(\0162\016.Messages.Type\022\014\n\004siz"
    "e\030\002 \001(\r\"<\n\016InitialMessage\022\034\n\004type\030\001 \002(\0162"
    "\016.Messages.Type\022\014\n\004size\030\002 \001(\r\"I\n\013Message"
    "MSG0\022\034\n\004type\030\001 \002(\0162\016.Messages.Type\022\014\n\004ep"
    "id\030\002 \002(\r\022\016\n\006status\030\003 \001(\r\"^\n\013MessageMSG1\022"
    "\034\n\004type\030\001 \002(\0162\016.Messages.Type\022\017\n\003GaX\030\002 \003"
    "(\rB\002\020\001\022\017\n\003GaY\030\003 \003(\rB\002\020\001\022\017\n\003GID\030\004 \003(\rB\002\020\001"
    "\"\213\002\n\013MessageMSG2\022\034\n\004type\030\001 \002(\0162\016.Message"
    "s.Type\022\014\n\004size\030\002 \001(\r\022\027\n\013publicKeyGx\030\003 \003("
    "\rB\002\020\001\022\027\n\013publicKeyGy\030\004 \003(\rB\002\020\001\022\021\n\tquoteT"
    "ype\030\005 \001(\r\022\020\n\004spid\030\006 \003(\rB\002\020\001\022\021\n\tcmacKdfId"
    "\030\007 \001(\r\022\026\n\nsignatureX\030\010 \003(\rB\002\020\001\022\026\n\nsignat"
    "ureY\030\t \003(\rB\002\020\001\022\020\n\004smac\030\n \003(\rB\002\020\001\022\021\n\tsize"
    "Sigrl\030\013 \001(\r\022\021\n\005sigrl\030\014 \003(\rB\002\020\001\"\243\001\n\013Messa"
    "geMSG3\022\034\n\004type\030\001 \002(\0162\016.Messages.Type\022\014\n\004"
    "size\030\002 \001(\r\022\022\n\006sgxMac\030\003 \003(\rB\002\020\001\022\023\n\007gaxMsg"
    "3\030\004 \003(\rB\002\020\001\022\023\n\007gayMsg3\030\005 \003(\rB\002\020\001\022\027\n\013secP"
    "roperty\030\006 \003(\rB\002\020\001\022\021\n\005quote\030\007 \003(\rB\002\020\001\"\254\003\n"
    "\022AttestationMessage\022\034\n\004type\030\001 \002(\0162\016.Mess"
    "ages.Type\022\014\n\004size\030\002 \002(\r\022\027\n\017epidGroupStat"
    "us\030\003 \001(\r\022\033\n\023tcbEvaluationStatus\030\004 \001(\r\022\033\n"
    "\023pseEvaluationStatus\030\005 \001(\r\022#\n\027latestEqui"
    "valentTcbPsvn\030\006 \003(\rB\002\020\001\022\033\n\017latestPseIsvs"
    "vn\030\007 \003(\rB\002\020\001\022\031\n\rlatestPsdaSvn\030\010 \003(\rB\002\020\001\022"
    "\037\n\023performanceRekeyGid\030\t \003(\rB\002\020\001\022\026\n\necSi"
    "gn256X\030\n \003(\rB\002\020\001\022\026\n\necSign256Y\030\013 \003(\rB\002\020\001"
    "\022\022\n\006macSmk\030\014 \003(\rB\002\020\001\022\022\n\nresultSize\030\r \001(\r"
    "\022\024\n\010reserved\030\016 \003(\rB\002\020\001\022\026\n\npayloadTag\030\017 \003"
    "(\rB\002\020\001\022\023\n\007payload\030\020 \003(\rB\002\020\001\"\313\002\n\017AllInOne"
    "Message\022\034\n\004type\030\001 \002(\0162\016.Messages.Type\022*\n"
    "\tsecretMsg\030\002 \001(\0132\027.Messages.SecretMessag"
    "e\022)\n\007initMsg\030\003 \001(\0132\030.Messages.InitialMes"
    "sage\022#\n\004msg0\030\004 \001(\0132\025.Messages.MessageMSG"
    "0\022#\n\004msg1\030\005 \001(\0132\025.Messages.MessageMSG1\022#"
    "\n\004msg2\030\006 \001(\0132\025.Messages.MessageMSG2\022#\n\004m"
    "sg3\030\007 \001(\0132\025.Messages.MessageMSG3\022/\n\tatte"
    "stMsg\030\010 \001(\0132\034.Messages.AttestationMessag"
    "e*u\n\004Type\022\013\n\007RA_MSG0\020\000\022\013\n\007RA_MSG1\020\001\022\013\n\007R"
    "A_MSG2\020\002\022\013\n\007RA_MSG3\020\003\022\021\n\rRA_ATT_RESULT\020\004"
    "\022\023\n\017RA_VERIFICATION\020\005\022\021\n\rRA_APP_ATT_OK\020\006", 1640);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Messages.proto", &protobuf_RegisterTypes);
  SecretMessage::default_instance_ = new SecretMessage();
  InitialMessage::default_instance_ = new InitialMessage();
  MessageMSG0::default_instance_ = new MessageMSG0();
  MessageMSG1::default_instance_ = new MessageMSG1();
  MessageMSG2::default_instance_ = new MessageMSG2();
  MessageMSG3::default_instance_ = new MessageMSG3();
  AttestationMessage::default_instance_ = new AttestationMessage();
  AllInOneMessage::default_instance_ = new AllInOneMessage();
  SecretMessage::default_instance_->InitAsDefaultInstance();
  InitialMessage::default_instance_->InitAsDefaultInstance();
  MessageMSG0::default_instance_->InitAsDefaultInstance();
  MessageMSG1::default_instance_->InitAsDefaultInstance();
  MessageMSG2::default_instance_->InitAsDefaultInstance();
  MessageMSG3::default_instance_->InitAsDefaultInstance();
  AttestationMessage::default_instance_->InitAsDefaultInstance();
  AllInOneMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Messages_2eproto {
  StaticDescriptorInitializer_Messages_2eproto() {
    protobuf_AddDesc_Messages_2eproto();
  }
} static_descriptor_initializer_Messages_2eproto_;
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Type_descriptor_;
}
bool Type_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int SecretMessage::kTypeFieldNumber;
const int SecretMessage::kSizeFieldNumber;
#endif  // !_MSC_VER

SecretMessage::SecretMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.SecretMessage)
}

void SecretMessage::InitAsDefaultInstance() {
}

SecretMessage::SecretMessage(const SecretMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Messages.SecretMessage)
}

void SecretMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SecretMessage::~SecretMessage() {
  // @@protoc_insertion_point(destructor:Messages.SecretMessage)
  SharedDtor();
}

void SecretMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SecretMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SecretMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SecretMessage_descriptor_;
}

const SecretMessage& SecretMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

SecretMessage* SecretMessage::default_instance_ = NULL;

SecretMessage* SecretMessage::New() const {
  return new SecretMessage;
}

void SecretMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SecretMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SecretMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Messages.SecretMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Messages.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Messages::Type_IsValid(value)) {
            set_type(static_cast< ::Messages::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Messages.SecretMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Messages.SecretMessage)
  return false;
#undef DO_
}

void SecretMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Messages.SecretMessage)
  // required .Messages.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Messages.SecretMessage)
}

::google::protobuf::uint8* SecretMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.SecretMessage)
  // required .Messages.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.SecretMessage)
  return target;
}

int SecretMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Messages.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SecretMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SecretMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SecretMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SecretMessage::MergeFrom(const SecretMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SecretMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SecretMessage::CopyFrom(const SecretMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecretMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SecretMessage::Swap(SecretMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SecretMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SecretMessage_descriptor_;
  metadata.reflection = SecretMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InitialMessage::kTypeFieldNumber;
const int InitialMessage::kSizeFieldNumber;
#endif  // !_MSC_VER

InitialMessage::InitialMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.InitialMessage)
}

void InitialMessage::InitAsDefaultInstance() {
}

InitialMessage::InitialMessage(const InitialMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Messages.InitialMessage)
}

void InitialMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitialMessage::~InitialMessage() {
  // @@protoc_insertion_point(destructor:Messages.InitialMessage)
  SharedDtor();
}

void InitialMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitialMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitialMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitialMessage_descriptor_;
}

const InitialMessage& InitialMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

InitialMessage* InitialMessage::default_instance_ = NULL;

InitialMessage* InitialMessage::New() const {
  return new InitialMessage;
}

void InitialMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<InitialMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitialMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Messages.InitialMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Messages.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Messages::Type_IsValid(value)) {
            set_type(static_cast< ::Messages::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Messages.InitialMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Messages.InitialMessage)
  return false;
#undef DO_
}

void InitialMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Messages.InitialMessage)
  // required .Messages.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Messages.InitialMessage)
}

::google::protobuf::uint8* InitialMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.InitialMessage)
  // required .Messages.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.InitialMessage)
  return target;
}

int InitialMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Messages.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitialMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitialMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitialMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitialMessage::MergeFrom(const InitialMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitialMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitialMessage::CopyFrom(const InitialMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitialMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InitialMessage::Swap(InitialMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitialMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitialMessage_descriptor_;
  metadata.reflection = InitialMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageMSG0::kTypeFieldNumber;
const int MessageMSG0::kEpidFieldNumber;
const int MessageMSG0::kStatusFieldNumber;
#endif  // !_MSC_VER

MessageMSG0::MessageMSG0()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessageMSG0)
}

void MessageMSG0::InitAsDefaultInstance() {
}

MessageMSG0::MessageMSG0(const MessageMSG0& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Messages.MessageMSG0)
}

void MessageMSG0::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  epid_ = 0u;
  status_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageMSG0::~MessageMSG0() {
  // @@protoc_insertion_point(destructor:Messages.MessageMSG0)
  SharedDtor();
}

void MessageMSG0::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageMSG0::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageMSG0::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageMSG0_descriptor_;
}

const MessageMSG0& MessageMSG0::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

MessageMSG0* MessageMSG0::default_instance_ = NULL;

MessageMSG0* MessageMSG0::New() const {
  return new MessageMSG0;
}

void MessageMSG0::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageMSG0*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, status_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageMSG0::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Messages.MessageMSG0)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Messages.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Messages::Type_IsValid(value)) {
            set_type(static_cast< ::Messages::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_epid;
        break;
      }

      // required uint32 epid = 2;
      case 2: {
        if (tag == 16) {
         parse_epid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epid_)));
          set_has_epid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Messages.MessageMSG0)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Messages.MessageMSG0)
  return false;
#undef DO_
}

void MessageMSG0::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Messages.MessageMSG0)
  // required .Messages.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 epid = 2;
  if (has_epid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->epid(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Messages.MessageMSG0)
}

::google::protobuf::uint8* MessageMSG0::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessageMSG0)
  // required .Messages.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 epid = 2;
  if (has_epid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->epid(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessageMSG0)
  return target;
}

int MessageMSG0::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Messages.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 epid = 2;
    if (has_epid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epid());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageMSG0::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageMSG0* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageMSG0*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageMSG0::MergeFrom(const MessageMSG0& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_epid()) {
      set_epid(from.epid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageMSG0::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMSG0::CopyFrom(const MessageMSG0& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMSG0::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MessageMSG0::Swap(MessageMSG0* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(epid_, other->epid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageMSG0::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageMSG0_descriptor_;
  metadata.reflection = MessageMSG0_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageMSG1::kTypeFieldNumber;
const int MessageMSG1::kGaXFieldNumber;
const int MessageMSG1::kGaYFieldNumber;
const int MessageMSG1::kGIDFieldNumber;
#endif  // !_MSC_VER

MessageMSG1::MessageMSG1()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessageMSG1)
}

void MessageMSG1::InitAsDefaultInstance() {
}

MessageMSG1::MessageMSG1(const MessageMSG1& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Messages.MessageMSG1)
}

void MessageMSG1::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageMSG1::~MessageMSG1() {
  // @@protoc_insertion_point(destructor:Messages.MessageMSG1)
  SharedDtor();
}

void MessageMSG1::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageMSG1::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageMSG1::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageMSG1_descriptor_;
}

const MessageMSG1& MessageMSG1::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

MessageMSG1* MessageMSG1::default_instance_ = NULL;

MessageMSG1* MessageMSG1::New() const {
  return new MessageMSG1;
}

void MessageMSG1::Clear() {
  type_ = 0;
  gax_.Clear();
  gay_.Clear();
  gid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageMSG1::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Messages.MessageMSG1)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Messages.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Messages::Type_IsValid(value)) {
            set_type(static_cast< ::Messages::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_GaX;
        break;
      }

      // repeated uint32 GaX = 2 [packed = true];
      case 2: {
        if (tag == 18) {
         parse_GaX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gax())));
        } else if (tag == 16) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_gax())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_GaY;
        break;
      }

      // repeated uint32 GaY = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_GaY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gay())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_gay())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_GID;
        break;
      }

      // repeated uint32 GID = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_GID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gid())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_gid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Messages.MessageMSG1)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Messages.MessageMSG1)
  return false;
#undef DO_
}

void MessageMSG1::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Messages.MessageMSG1)
  // required .Messages.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated uint32 GaX = 2 [packed = true];
  if (this->gax_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gax_cached_byte_size_);
  }
  for (int i = 0; i < this->gax_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->gax(i), output);
  }

  // repeated uint32 GaY = 3 [packed = true];
  if (this->gay_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gay_cached_byte_size_);
  }
  for (int i = 0; i < this->gay_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->gay(i), output);
  }

  // repeated uint32 GID = 4 [packed = true];
  if (this->gid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gid_cached_byte_size_);
  }
  for (int i = 0; i < this->gid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->gid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Messages.MessageMSG1)
}

::google::protobuf::uint8* MessageMSG1::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessageMSG1)
  // required .Messages.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated uint32 GaX = 2 [packed = true];
  if (this->gax_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _gax_cached_byte_size_, target);
  }
  for (int i = 0; i < this->gax_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->gax(i), target);
  }

  // repeated uint32 GaY = 3 [packed = true];
  if (this->gay_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _gay_cached_byte_size_, target);
  }
  for (int i = 0; i < this->gay_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->gay(i), target);
  }

  // repeated uint32 GID = 4 [packed = true];
  if (this->gid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _gid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->gid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->gid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessageMSG1)
  return target;
}

int MessageMSG1::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Messages.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  // repeated uint32 GaX = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->gax_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gax(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gax_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 GaY = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->gay_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gay(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gay_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 GID = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->gid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageMSG1::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageMSG1* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageMSG1*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageMSG1::MergeFrom(const MessageMSG1& from) {
  GOOGLE_CHECK_NE(&from, this);
  gax_.MergeFrom(from.gax_);
  gay_.MergeFrom(from.gay_);
  gid_.MergeFrom(from.gid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageMSG1::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMSG1::CopyFrom(const MessageMSG1& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMSG1::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MessageMSG1::Swap(MessageMSG1* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    gax_.Swap(&other->gax_);
    gay_.Swap(&other->gay_);
    gid_.Swap(&other->gid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageMSG1::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageMSG1_descriptor_;
  metadata.reflection = MessageMSG1_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageMSG2::kTypeFieldNumber;
const int MessageMSG2::kSizeFieldNumber;
const int MessageMSG2::kPublicKeyGxFieldNumber;
const int MessageMSG2::kPublicKeyGyFieldNumber;
const int MessageMSG2::kQuoteTypeFieldNumber;
const int MessageMSG2::kSpidFieldNumber;
const int MessageMSG2::kCmacKdfIdFieldNumber;
const int MessageMSG2::kSignatureXFieldNumber;
const int MessageMSG2::kSignatureYFieldNumber;
const int MessageMSG2::kSmacFieldNumber;
const int MessageMSG2::kSizeSigrlFieldNumber;
const int MessageMSG2::kSigrlFieldNumber;
#endif  // !_MSC_VER

MessageMSG2::MessageMSG2()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessageMSG2)
}

void MessageMSG2::InitAsDefaultInstance() {
}

MessageMSG2::MessageMSG2(const MessageMSG2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Messages.MessageMSG2)
}

void MessageMSG2::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  size_ = 0u;
  quotetype_ = 0u;
  cmackdfid_ = 0u;
  sizesigrl_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageMSG2::~MessageMSG2() {
  // @@protoc_insertion_point(destructor:Messages.MessageMSG2)
  SharedDtor();
}

void MessageMSG2::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageMSG2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageMSG2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageMSG2_descriptor_;
}

const MessageMSG2& MessageMSG2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

MessageMSG2* MessageMSG2::default_instance_ = NULL;

MessageMSG2* MessageMSG2::New() const {
  return new MessageMSG2;
}

void MessageMSG2::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageMSG2*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, size_);
  ZR_(quotetype_, cmackdfid_);
  sizesigrl_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  publickeygx_.Clear();
  publickeygy_.Clear();
  spid_.Clear();
  signaturex_.Clear();
  signaturey_.Clear();
  smac_.Clear();
  sigrl_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageMSG2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Messages.MessageMSG2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Messages.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Messages::Type_IsValid(value)) {
            set_type(static_cast< ::Messages::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_publicKeyGx;
        break;
      }

      // repeated uint32 publicKeyGx = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_publicKeyGx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_publickeygx())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_publickeygx())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_publicKeyGy;
        break;
      }

      // repeated uint32 publicKeyGy = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_publicKeyGy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_publickeygy())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_publickeygy())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_quoteType;
        break;
      }

      // optional uint32 quoteType = 5;
      case 5: {
        if (tag == 40) {
         parse_quoteType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quotetype_)));
          set_has_quotetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_spid;
        break;
      }

      // repeated uint32 spid = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_spid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_spid())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50, input, this->mutable_spid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cmacKdfId;
        break;
      }

      // optional uint32 cmacKdfId = 7;
      case 7: {
        if (tag == 56) {
         parse_cmacKdfId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmackdfid_)));
          set_has_cmackdfid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_signatureX;
        break;
      }

      // repeated uint32 signatureX = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_signatureX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_signaturex())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66, input, this->mutable_signaturex())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_signatureY;
        break;
      }

      // repeated uint32 signatureY = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_signatureY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_signaturey())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74, input, this->mutable_signaturey())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_smac;
        break;
      }

      // repeated uint32 smac = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_smac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_smac())));
        } else if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82, input, this->mutable_smac())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_sizeSigrl;
        break;
      }

      // optional uint32 sizeSigrl = 11;
      case 11: {
        if (tag == 88) {
         parse_sizeSigrl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sizesigrl_)));
          set_has_sizesigrl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_sigrl;
        break;
      }

      // repeated uint32 sigrl = 12 [packed = true];
      case 12: {
        if (tag == 98) {
         parse_sigrl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sigrl())));
        } else if (tag == 96) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98, input, this->mutable_sigrl())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Messages.MessageMSG2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Messages.MessageMSG2)
  return false;
#undef DO_
}

void MessageMSG2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Messages.MessageMSG2)
  // required .Messages.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // repeated uint32 publicKeyGx = 3 [packed = true];
  if (this->publickeygx_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_publickeygx_cached_byte_size_);
  }
  for (int i = 0; i < this->publickeygx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->publickeygx(i), output);
  }

  // repeated uint32 publicKeyGy = 4 [packed = true];
  if (this->publickeygy_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_publickeygy_cached_byte_size_);
  }
  for (int i = 0; i < this->publickeygy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->publickeygy(i), output);
  }

  // optional uint32 quoteType = 5;
  if (has_quotetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quotetype(), output);
  }

  // repeated uint32 spid = 6 [packed = true];
  if (this->spid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_spid_cached_byte_size_);
  }
  for (int i = 0; i < this->spid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->spid(i), output);
  }

  // optional uint32 cmacKdfId = 7;
  if (has_cmackdfid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cmackdfid(), output);
  }

  // repeated uint32 signatureX = 8 [packed = true];
  if (this->signaturex_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_signaturex_cached_byte_size_);
  }
  for (int i = 0; i < this->signaturex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->signaturex(i), output);
  }

  // repeated uint32 signatureY = 9 [packed = true];
  if (this->signaturey_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_signaturey_cached_byte_size_);
  }
  for (int i = 0; i < this->signaturey_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->signaturey(i), output);
  }

  // repeated uint32 smac = 10 [packed = true];
  if (this->smac_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_smac_cached_byte_size_);
  }
  for (int i = 0; i < this->smac_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->smac(i), output);
  }

  // optional uint32 sizeSigrl = 11;
  if (has_sizesigrl()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->sizesigrl(), output);
  }

  // repeated uint32 sigrl = 12 [packed = true];
  if (this->sigrl_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sigrl_cached_byte_size_);
  }
  for (int i = 0; i < this->sigrl_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->sigrl(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Messages.MessageMSG2)
}

::google::protobuf::uint8* MessageMSG2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessageMSG2)
  // required .Messages.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // repeated uint32 publicKeyGx = 3 [packed = true];
  if (this->publickeygx_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _publickeygx_cached_byte_size_, target);
  }
  for (int i = 0; i < this->publickeygx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->publickeygx(i), target);
  }

  // repeated uint32 publicKeyGy = 4 [packed = true];
  if (this->publickeygy_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _publickeygy_cached_byte_size_, target);
  }
  for (int i = 0; i < this->publickeygy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->publickeygy(i), target);
  }

  // optional uint32 quoteType = 5;
  if (has_quotetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quotetype(), target);
  }

  // repeated uint32 spid = 6 [packed = true];
  if (this->spid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _spid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->spid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->spid(i), target);
  }

  // optional uint32 cmacKdfId = 7;
  if (has_cmackdfid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cmackdfid(), target);
  }

  // repeated uint32 signatureX = 8 [packed = true];
  if (this->signaturex_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _signaturex_cached_byte_size_, target);
  }
  for (int i = 0; i < this->signaturex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->signaturex(i), target);
  }

  // repeated uint32 signatureY = 9 [packed = true];
  if (this->signaturey_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _signaturey_cached_byte_size_, target);
  }
  for (int i = 0; i < this->signaturey_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->signaturey(i), target);
  }

  // repeated uint32 smac = 10 [packed = true];
  if (this->smac_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _smac_cached_byte_size_, target);
  }
  for (int i = 0; i < this->smac_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->smac(i), target);
  }

  // optional uint32 sizeSigrl = 11;
  if (has_sizesigrl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->sizesigrl(), target);
  }

  // repeated uint32 sigrl = 12 [packed = true];
  if (this->sigrl_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _sigrl_cached_byte_size_, target);
  }
  for (int i = 0; i < this->sigrl_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->sigrl(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessageMSG2)
  return target;
}

int MessageMSG2::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Messages.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional uint32 quoteType = 5;
    if (has_quotetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quotetype());
    }

    // optional uint32 cmacKdfId = 7;
    if (has_cmackdfid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmackdfid());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint32 sizeSigrl = 11;
    if (has_sizesigrl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sizesigrl());
    }

  }
  // repeated uint32 publicKeyGx = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->publickeygx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->publickeygx(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _publickeygx_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 publicKeyGy = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->publickeygy_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->publickeygy(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _publickeygy_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 spid = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->spid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->spid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _spid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 signatureX = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->signaturex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->signaturex(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _signaturex_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 signatureY = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->signaturey_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->signaturey(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _signaturey_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 smac = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->smac_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->smac(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _smac_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 sigrl = 12 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->sigrl_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sigrl(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sigrl_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageMSG2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageMSG2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageMSG2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageMSG2::MergeFrom(const MessageMSG2& from) {
  GOOGLE_CHECK_NE(&from, this);
  publickeygx_.MergeFrom(from.publickeygx_);
  publickeygy_.MergeFrom(from.publickeygy_);
  spid_.MergeFrom(from.spid_);
  signaturex_.MergeFrom(from.signaturex_);
  signaturey_.MergeFrom(from.signaturey_);
  smac_.MergeFrom(from.smac_);
  sigrl_.MergeFrom(from.sigrl_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_quotetype()) {
      set_quotetype(from.quotetype());
    }
    if (from.has_cmackdfid()) {
      set_cmackdfid(from.cmackdfid());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_sizesigrl()) {
      set_sizesigrl(from.sizesigrl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageMSG2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMSG2::CopyFrom(const MessageMSG2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMSG2::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MessageMSG2::Swap(MessageMSG2* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    publickeygx_.Swap(&other->publickeygx_);
    publickeygy_.Swap(&other->publickeygy_);
    std::swap(quotetype_, other->quotetype_);
    spid_.Swap(&other->spid_);
    std::swap(cmackdfid_, other->cmackdfid_);
    signaturex_.Swap(&other->signaturex_);
    signaturey_.Swap(&other->signaturey_);
    smac_.Swap(&other->smac_);
    std::swap(sizesigrl_, other->sizesigrl_);
    sigrl_.Swap(&other->sigrl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageMSG2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageMSG2_descriptor_;
  metadata.reflection = MessageMSG2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageMSG3::kTypeFieldNumber;
const int MessageMSG3::kSizeFieldNumber;
const int MessageMSG3::kSgxMacFieldNumber;
const int MessageMSG3::kGaxMsg3FieldNumber;
const int MessageMSG3::kGayMsg3FieldNumber;
const int MessageMSG3::kSecPropertyFieldNumber;
const int MessageMSG3::kQuoteFieldNumber;
#endif  // !_MSC_VER

MessageMSG3::MessageMSG3()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.MessageMSG3)
}

void MessageMSG3::InitAsDefaultInstance() {
}

MessageMSG3::MessageMSG3(const MessageMSG3& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Messages.MessageMSG3)
}

void MessageMSG3::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageMSG3::~MessageMSG3() {
  // @@protoc_insertion_point(destructor:Messages.MessageMSG3)
  SharedDtor();
}

void MessageMSG3::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageMSG3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageMSG3::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageMSG3_descriptor_;
}

const MessageMSG3& MessageMSG3::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

MessageMSG3* MessageMSG3::default_instance_ = NULL;

MessageMSG3* MessageMSG3::New() const {
  return new MessageMSG3;
}

void MessageMSG3::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageMSG3*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(type_, size_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  sgxmac_.Clear();
  gaxmsg3_.Clear();
  gaymsg3_.Clear();
  secproperty_.Clear();
  quote_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageMSG3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Messages.MessageMSG3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Messages.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Messages::Type_IsValid(value)) {
            set_type(static_cast< ::Messages::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sgxMac;
        break;
      }

      // repeated uint32 sgxMac = 3 [packed = true];
      case 3: {
        if (tag == 26) {
         parse_sgxMac:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_sgxmac())));
        } else if (tag == 24) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26, input, this->mutable_sgxmac())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gaxMsg3;
        break;
      }

      // repeated uint32 gaxMsg3 = 4 [packed = true];
      case 4: {
        if (tag == 34) {
         parse_gaxMsg3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gaxmsg3())));
        } else if (tag == 32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34, input, this->mutable_gaxmsg3())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gayMsg3;
        break;
      }

      // repeated uint32 gayMsg3 = 5 [packed = true];
      case 5: {
        if (tag == 42) {
         parse_gayMsg3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gaymsg3())));
        } else if (tag == 40) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_gaymsg3())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_secProperty;
        break;
      }

      // repeated uint32 secProperty = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_secProperty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_secproperty())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50, input, this->mutable_secproperty())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_quote;
        break;
      }

      // repeated uint32 quote = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_quote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_quote())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58, input, this->mutable_quote())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Messages.MessageMSG3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Messages.MessageMSG3)
  return false;
#undef DO_
}

void MessageMSG3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Messages.MessageMSG3)
  // required .Messages.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // repeated uint32 sgxMac = 3 [packed = true];
  if (this->sgxmac_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_sgxmac_cached_byte_size_);
  }
  for (int i = 0; i < this->sgxmac_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->sgxmac(i), output);
  }

  // repeated uint32 gaxMsg3 = 4 [packed = true];
  if (this->gaxmsg3_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gaxmsg3_cached_byte_size_);
  }
  for (int i = 0; i < this->gaxmsg3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->gaxmsg3(i), output);
  }

  // repeated uint32 gayMsg3 = 5 [packed = true];
  if (this->gaymsg3_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_gaymsg3_cached_byte_size_);
  }
  for (int i = 0; i < this->gaymsg3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->gaymsg3(i), output);
  }

  // repeated uint32 secProperty = 6 [packed = true];
  if (this->secproperty_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_secproperty_cached_byte_size_);
  }
  for (int i = 0; i < this->secproperty_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->secproperty(i), output);
  }

  // repeated uint32 quote = 7 [packed = true];
  if (this->quote_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_quote_cached_byte_size_);
  }
  for (int i = 0; i < this->quote_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->quote(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Messages.MessageMSG3)
}

::google::protobuf::uint8* MessageMSG3::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.MessageMSG3)
  // required .Messages.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // repeated uint32 sgxMac = 3 [packed = true];
  if (this->sgxmac_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _sgxmac_cached_byte_size_, target);
  }
  for (int i = 0; i < this->sgxmac_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->sgxmac(i), target);
  }

  // repeated uint32 gaxMsg3 = 4 [packed = true];
  if (this->gaxmsg3_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _gaxmsg3_cached_byte_size_, target);
  }
  for (int i = 0; i < this->gaxmsg3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->gaxmsg3(i), target);
  }

  // repeated uint32 gayMsg3 = 5 [packed = true];
  if (this->gaymsg3_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _gaymsg3_cached_byte_size_, target);
  }
  for (int i = 0; i < this->gaymsg3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->gaymsg3(i), target);
  }

  // repeated uint32 secProperty = 6 [packed = true];
  if (this->secproperty_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _secproperty_cached_byte_size_, target);
  }
  for (int i = 0; i < this->secproperty_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->secproperty(i), target);
  }

  // repeated uint32 quote = 7 [packed = true];
  if (this->quote_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _quote_cached_byte_size_, target);
  }
  for (int i = 0; i < this->quote_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->quote(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.MessageMSG3)
  return target;
}

int MessageMSG3::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Messages.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  // repeated uint32 sgxMac = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->sgxmac_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->sgxmac(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _sgxmac_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 gaxMsg3 = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->gaxmsg3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gaxmsg3(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gaxmsg3_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 gayMsg3 = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->gaymsg3_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->gaymsg3(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _gaymsg3_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 secProperty = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->secproperty_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->secproperty(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _secproperty_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 quote = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->quote_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->quote(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _quote_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageMSG3::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageMSG3* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageMSG3*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageMSG3::MergeFrom(const MessageMSG3& from) {
  GOOGLE_CHECK_NE(&from, this);
  sgxmac_.MergeFrom(from.sgxmac_);
  gaxmsg3_.MergeFrom(from.gaxmsg3_);
  gaymsg3_.MergeFrom(from.gaymsg3_);
  secproperty_.MergeFrom(from.secproperty_);
  quote_.MergeFrom(from.quote_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageMSG3::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageMSG3::CopyFrom(const MessageMSG3& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageMSG3::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MessageMSG3::Swap(MessageMSG3* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    sgxmac_.Swap(&other->sgxmac_);
    gaxmsg3_.Swap(&other->gaxmsg3_);
    gaymsg3_.Swap(&other->gaymsg3_);
    secproperty_.Swap(&other->secproperty_);
    quote_.Swap(&other->quote_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageMSG3::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageMSG3_descriptor_;
  metadata.reflection = MessageMSG3_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttestationMessage::kTypeFieldNumber;
const int AttestationMessage::kSizeFieldNumber;
const int AttestationMessage::kEpidGroupStatusFieldNumber;
const int AttestationMessage::kTcbEvaluationStatusFieldNumber;
const int AttestationMessage::kPseEvaluationStatusFieldNumber;
const int AttestationMessage::kLatestEquivalentTcbPsvnFieldNumber;
const int AttestationMessage::kLatestPseIsvsvnFieldNumber;
const int AttestationMessage::kLatestPsdaSvnFieldNumber;
const int AttestationMessage::kPerformanceRekeyGidFieldNumber;
const int AttestationMessage::kEcSign256XFieldNumber;
const int AttestationMessage::kEcSign256YFieldNumber;
const int AttestationMessage::kMacSmkFieldNumber;
const int AttestationMessage::kResultSizeFieldNumber;
const int AttestationMessage::kReservedFieldNumber;
const int AttestationMessage::kPayloadTagFieldNumber;
const int AttestationMessage::kPayloadFieldNumber;
#endif  // !_MSC_VER

AttestationMessage::AttestationMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.AttestationMessage)
}

void AttestationMessage::InitAsDefaultInstance() {
}

AttestationMessage::AttestationMessage(const AttestationMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Messages.AttestationMessage)
}

void AttestationMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  size_ = 0u;
  epidgroupstatus_ = 0u;
  tcbevaluationstatus_ = 0u;
  pseevaluationstatus_ = 0u;
  resultsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttestationMessage::~AttestationMessage() {
  // @@protoc_insertion_point(destructor:Messages.AttestationMessage)
  SharedDtor();
}

void AttestationMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttestationMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttestationMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttestationMessage_descriptor_;
}

const AttestationMessage& AttestationMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

AttestationMessage* AttestationMessage::default_instance_ = NULL;

AttestationMessage* AttestationMessage::New() const {
  return new AttestationMessage;
}

void AttestationMessage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AttestationMessage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_, tcbevaluationstatus_);
    pseevaluationstatus_ = 0u;
  }
  resultsize_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  latestequivalenttcbpsvn_.Clear();
  latestpseisvsvn_.Clear();
  latestpsdasvn_.Clear();
  performancerekeygid_.Clear();
  ecsign256x_.Clear();
  ecsign256y_.Clear();
  macsmk_.Clear();
  reserved_.Clear();
  payloadtag_.Clear();
  payload_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttestationMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Messages.AttestationMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Messages.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Messages::Type_IsValid(value)) {
            set_type(static_cast< ::Messages::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // required uint32 size = 2;
      case 2: {
        if (tag == 16) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_epidGroupStatus;
        break;
      }

      // optional uint32 epidGroupStatus = 3;
      case 3: {
        if (tag == 24) {
         parse_epidGroupStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &epidgroupstatus_)));
          set_has_epidgroupstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_tcbEvaluationStatus;
        break;
      }

      // optional uint32 tcbEvaluationStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_tcbEvaluationStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tcbevaluationstatus_)));
          set_has_tcbevaluationstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pseEvaluationStatus;
        break;
      }

      // optional uint32 pseEvaluationStatus = 5;
      case 5: {
        if (tag == 40) {
         parse_pseEvaluationStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pseevaluationstatus_)));
          set_has_pseevaluationstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_latestEquivalentTcbPsvn;
        break;
      }

      // repeated uint32 latestEquivalentTcbPsvn = 6 [packed = true];
      case 6: {
        if (tag == 50) {
         parse_latestEquivalentTcbPsvn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_latestequivalenttcbpsvn())));
        } else if (tag == 48) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50, input, this->mutable_latestequivalenttcbpsvn())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_latestPseIsvsvn;
        break;
      }

      // repeated uint32 latestPseIsvsvn = 7 [packed = true];
      case 7: {
        if (tag == 58) {
         parse_latestPseIsvsvn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_latestpseisvsvn())));
        } else if (tag == 56) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58, input, this->mutable_latestpseisvsvn())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_latestPsdaSvn;
        break;
      }

      // repeated uint32 latestPsdaSvn = 8 [packed = true];
      case 8: {
        if (tag == 66) {
         parse_latestPsdaSvn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_latestpsdasvn())));
        } else if (tag == 64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66, input, this->mutable_latestpsdasvn())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_performanceRekeyGid;
        break;
      }

      // repeated uint32 performanceRekeyGid = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_performanceRekeyGid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_performancerekeygid())));
        } else if (tag == 72) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74, input, this->mutable_performancerekeygid())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_ecSign256X;
        break;
      }

      // repeated uint32 ecSign256X = 10 [packed = true];
      case 10: {
        if (tag == 82) {
         parse_ecSign256X:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ecsign256x())));
        } else if (tag == 80) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82, input, this->mutable_ecsign256x())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_ecSign256Y;
        break;
      }

      // repeated uint32 ecSign256Y = 11 [packed = true];
      case 11: {
        if (tag == 90) {
         parse_ecSign256Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ecsign256y())));
        } else if (tag == 88) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 90, input, this->mutable_ecsign256y())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_macSmk;
        break;
      }

      // repeated uint32 macSmk = 12 [packed = true];
      case 12: {
        if (tag == 98) {
         parse_macSmk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_macsmk())));
        } else if (tag == 96) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 98, input, this->mutable_macsmk())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_resultSize;
        break;
      }

      // optional uint32 resultSize = 13;
      case 13: {
        if (tag == 104) {
         parse_resultSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resultsize_)));
          set_has_resultsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_reserved;
        break;
      }

      // repeated uint32 reserved = 14 [packed = true];
      case 14: {
        if (tag == 114) {
         parse_reserved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_reserved())));
        } else if (tag == 112) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 114, input, this->mutable_reserved())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_payloadTag;
        break;
      }

      // repeated uint32 payloadTag = 15 [packed = true];
      case 15: {
        if (tag == 122) {
         parse_payloadTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_payloadtag())));
        } else if (tag == 120) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 122, input, this->mutable_payloadtag())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_payload;
        break;
      }

      // repeated uint32 payload = 16 [packed = true];
      case 16: {
        if (tag == 130) {
         parse_payload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_payload())));
        } else if (tag == 128) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 130, input, this->mutable_payload())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Messages.AttestationMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Messages.AttestationMessage)
  return false;
#undef DO_
}

void AttestationMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Messages.AttestationMessage)
  // required .Messages.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  // optional uint32 epidGroupStatus = 3;
  if (has_epidgroupstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->epidgroupstatus(), output);
  }

  // optional uint32 tcbEvaluationStatus = 4;
  if (has_tcbevaluationstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tcbevaluationstatus(), output);
  }

  // optional uint32 pseEvaluationStatus = 5;
  if (has_pseevaluationstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pseevaluationstatus(), output);
  }

  // repeated uint32 latestEquivalentTcbPsvn = 6 [packed = true];
  if (this->latestequivalenttcbpsvn_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_latestequivalenttcbpsvn_cached_byte_size_);
  }
  for (int i = 0; i < this->latestequivalenttcbpsvn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->latestequivalenttcbpsvn(i), output);
  }

  // repeated uint32 latestPseIsvsvn = 7 [packed = true];
  if (this->latestpseisvsvn_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_latestpseisvsvn_cached_byte_size_);
  }
  for (int i = 0; i < this->latestpseisvsvn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->latestpseisvsvn(i), output);
  }

  // repeated uint32 latestPsdaSvn = 8 [packed = true];
  if (this->latestpsdasvn_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_latestpsdasvn_cached_byte_size_);
  }
  for (int i = 0; i < this->latestpsdasvn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->latestpsdasvn(i), output);
  }

  // repeated uint32 performanceRekeyGid = 9 [packed = true];
  if (this->performancerekeygid_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_performancerekeygid_cached_byte_size_);
  }
  for (int i = 0; i < this->performancerekeygid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->performancerekeygid(i), output);
  }

  // repeated uint32 ecSign256X = 10 [packed = true];
  if (this->ecsign256x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ecsign256x_cached_byte_size_);
  }
  for (int i = 0; i < this->ecsign256x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ecsign256x(i), output);
  }

  // repeated uint32 ecSign256Y = 11 [packed = true];
  if (this->ecsign256y_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ecsign256y_cached_byte_size_);
  }
  for (int i = 0; i < this->ecsign256y_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->ecsign256y(i), output);
  }

  // repeated uint32 macSmk = 12 [packed = true];
  if (this->macsmk_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_macsmk_cached_byte_size_);
  }
  for (int i = 0; i < this->macsmk_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->macsmk(i), output);
  }

  // optional uint32 resultSize = 13;
  if (has_resultsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->resultsize(), output);
  }

  // repeated uint32 reserved = 14 [packed = true];
  if (this->reserved_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(14, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_reserved_cached_byte_size_);
  }
  for (int i = 0; i < this->reserved_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->reserved(i), output);
  }

  // repeated uint32 payloadTag = 15 [packed = true];
  if (this->payloadtag_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(15, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_payloadtag_cached_byte_size_);
  }
  for (int i = 0; i < this->payloadtag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->payloadtag(i), output);
  }

  // repeated uint32 payload = 16 [packed = true];
  if (this->payload_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(16, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_payload_cached_byte_size_);
  }
  for (int i = 0; i < this->payload_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->payload(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Messages.AttestationMessage)
}

::google::protobuf::uint8* AttestationMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.AttestationMessage)
  // required .Messages.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  // optional uint32 epidGroupStatus = 3;
  if (has_epidgroupstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->epidgroupstatus(), target);
  }

  // optional uint32 tcbEvaluationStatus = 4;
  if (has_tcbevaluationstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tcbevaluationstatus(), target);
  }

  // optional uint32 pseEvaluationStatus = 5;
  if (has_pseevaluationstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pseevaluationstatus(), target);
  }

  // repeated uint32 latestEquivalentTcbPsvn = 6 [packed = true];
  if (this->latestequivalenttcbpsvn_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _latestequivalenttcbpsvn_cached_byte_size_, target);
  }
  for (int i = 0; i < this->latestequivalenttcbpsvn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->latestequivalenttcbpsvn(i), target);
  }

  // repeated uint32 latestPseIsvsvn = 7 [packed = true];
  if (this->latestpseisvsvn_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _latestpseisvsvn_cached_byte_size_, target);
  }
  for (int i = 0; i < this->latestpseisvsvn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->latestpseisvsvn(i), target);
  }

  // repeated uint32 latestPsdaSvn = 8 [packed = true];
  if (this->latestpsdasvn_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _latestpsdasvn_cached_byte_size_, target);
  }
  for (int i = 0; i < this->latestpsdasvn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->latestpsdasvn(i), target);
  }

  // repeated uint32 performanceRekeyGid = 9 [packed = true];
  if (this->performancerekeygid_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _performancerekeygid_cached_byte_size_, target);
  }
  for (int i = 0; i < this->performancerekeygid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->performancerekeygid(i), target);
  }

  // repeated uint32 ecSign256X = 10 [packed = true];
  if (this->ecsign256x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ecsign256x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ecsign256x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ecsign256x(i), target);
  }

  // repeated uint32 ecSign256Y = 11 [packed = true];
  if (this->ecsign256y_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ecsign256y_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ecsign256y_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->ecsign256y(i), target);
  }

  // repeated uint32 macSmk = 12 [packed = true];
  if (this->macsmk_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _macsmk_cached_byte_size_, target);
  }
  for (int i = 0; i < this->macsmk_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->macsmk(i), target);
  }

  // optional uint32 resultSize = 13;
  if (has_resultsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->resultsize(), target);
  }

  // repeated uint32 reserved = 14 [packed = true];
  if (this->reserved_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      14,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _reserved_cached_byte_size_, target);
  }
  for (int i = 0; i < this->reserved_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->reserved(i), target);
  }

  // repeated uint32 payloadTag = 15 [packed = true];
  if (this->payloadtag_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      15,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _payloadtag_cached_byte_size_, target);
  }
  for (int i = 0; i < this->payloadtag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->payloadtag(i), target);
  }

  // repeated uint32 payload = 16 [packed = true];
  if (this->payload_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      16,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _payload_cached_byte_size_, target);
  }
  for (int i = 0; i < this->payload_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->payload(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.AttestationMessage)
  return target;
}

int AttestationMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Messages.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional uint32 epidGroupStatus = 3;
    if (has_epidgroupstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->epidgroupstatus());
    }

    // optional uint32 tcbEvaluationStatus = 4;
    if (has_tcbevaluationstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tcbevaluationstatus());
    }

    // optional uint32 pseEvaluationStatus = 5;
    if (has_pseevaluationstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pseevaluationstatus());
    }

  }
  if (_has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    // optional uint32 resultSize = 13;
    if (has_resultsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resultsize());
    }

  }
  // repeated uint32 latestEquivalentTcbPsvn = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->latestequivalenttcbpsvn_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->latestequivalenttcbpsvn(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _latestequivalenttcbpsvn_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 latestPseIsvsvn = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->latestpseisvsvn_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->latestpseisvsvn(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _latestpseisvsvn_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 latestPsdaSvn = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->latestpsdasvn_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->latestpsdasvn(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _latestpsdasvn_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 performanceRekeyGid = 9 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->performancerekeygid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->performancerekeygid(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _performancerekeygid_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 ecSign256X = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->ecsign256x_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ecsign256x(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ecsign256x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 ecSign256Y = 11 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->ecsign256y_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ecsign256y(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ecsign256y_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 macSmk = 12 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->macsmk_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->macsmk(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _macsmk_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 reserved = 14 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->reserved_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->reserved(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _reserved_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 payloadTag = 15 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->payloadtag_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->payloadtag(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _payloadtag_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 payload = 16 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->payload_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->payload(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _payload_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttestationMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttestationMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttestationMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttestationMessage::MergeFrom(const AttestationMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  latestequivalenttcbpsvn_.MergeFrom(from.latestequivalenttcbpsvn_);
  latestpseisvsvn_.MergeFrom(from.latestpseisvsvn_);
  latestpsdasvn_.MergeFrom(from.latestpsdasvn_);
  performancerekeygid_.MergeFrom(from.performancerekeygid_);
  ecsign256x_.MergeFrom(from.ecsign256x_);
  ecsign256y_.MergeFrom(from.ecsign256y_);
  macsmk_.MergeFrom(from.macsmk_);
  reserved_.MergeFrom(from.reserved_);
  payloadtag_.MergeFrom(from.payloadtag_);
  payload_.MergeFrom(from.payload_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_epidgroupstatus()) {
      set_epidgroupstatus(from.epidgroupstatus());
    }
    if (from.has_tcbevaluationstatus()) {
      set_tcbevaluationstatus(from.tcbevaluationstatus());
    }
    if (from.has_pseevaluationstatus()) {
      set_pseevaluationstatus(from.pseevaluationstatus());
    }
  }
  if (from._has_bits_[12 / 32] & (0xffu << (12 % 32))) {
    if (from.has_resultsize()) {
      set_resultsize(from.resultsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttestationMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttestationMessage::CopyFrom(const AttestationMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttestationMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AttestationMessage::Swap(AttestationMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(size_, other->size_);
    std::swap(epidgroupstatus_, other->epidgroupstatus_);
    std::swap(tcbevaluationstatus_, other->tcbevaluationstatus_);
    std::swap(pseevaluationstatus_, other->pseevaluationstatus_);
    latestequivalenttcbpsvn_.Swap(&other->latestequivalenttcbpsvn_);
    latestpseisvsvn_.Swap(&other->latestpseisvsvn_);
    latestpsdasvn_.Swap(&other->latestpsdasvn_);
    performancerekeygid_.Swap(&other->performancerekeygid_);
    ecsign256x_.Swap(&other->ecsign256x_);
    ecsign256y_.Swap(&other->ecsign256y_);
    macsmk_.Swap(&other->macsmk_);
    std::swap(resultsize_, other->resultsize_);
    reserved_.Swap(&other->reserved_);
    payloadtag_.Swap(&other->payloadtag_);
    payload_.Swap(&other->payload_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttestationMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttestationMessage_descriptor_;
  metadata.reflection = AttestationMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllInOneMessage::kTypeFieldNumber;
const int AllInOneMessage::kSecretMsgFieldNumber;
const int AllInOneMessage::kInitMsgFieldNumber;
const int AllInOneMessage::kMsg0FieldNumber;
const int AllInOneMessage::kMsg1FieldNumber;
const int AllInOneMessage::kMsg2FieldNumber;
const int AllInOneMessage::kMsg3FieldNumber;
const int AllInOneMessage::kAttestMsgFieldNumber;
#endif  // !_MSC_VER

AllInOneMessage::AllInOneMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Messages.AllInOneMessage)
}

void AllInOneMessage::InitAsDefaultInstance() {
  secretmsg_ = const_cast< ::Messages::SecretMessage*>(&::Messages::SecretMessage::default_instance());
  initmsg_ = const_cast< ::Messages::InitialMessage*>(&::Messages::InitialMessage::default_instance());
  msg0_ = const_cast< ::Messages::MessageMSG0*>(&::Messages::MessageMSG0::default_instance());
  msg1_ = const_cast< ::Messages::MessageMSG1*>(&::Messages::MessageMSG1::default_instance());
  msg2_ = const_cast< ::Messages::MessageMSG2*>(&::Messages::MessageMSG2::default_instance());
  msg3_ = const_cast< ::Messages::MessageMSG3*>(&::Messages::MessageMSG3::default_instance());
  attestmsg_ = const_cast< ::Messages::AttestationMessage*>(&::Messages::AttestationMessage::default_instance());
}

AllInOneMessage::AllInOneMessage(const AllInOneMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Messages.AllInOneMessage)
}

void AllInOneMessage::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  secretmsg_ = NULL;
  initmsg_ = NULL;
  msg0_ = NULL;
  msg1_ = NULL;
  msg2_ = NULL;
  msg3_ = NULL;
  attestmsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllInOneMessage::~AllInOneMessage() {
  // @@protoc_insertion_point(destructor:Messages.AllInOneMessage)
  SharedDtor();
}

void AllInOneMessage::SharedDtor() {
  if (this != default_instance_) {
    delete secretmsg_;
    delete initmsg_;
    delete msg0_;
    delete msg1_;
    delete msg2_;
    delete msg3_;
    delete attestmsg_;
  }
}

void AllInOneMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllInOneMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllInOneMessage_descriptor_;
}

const AllInOneMessage& AllInOneMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Messages_2eproto();
  return *default_instance_;
}

AllInOneMessage* AllInOneMessage::default_instance_ = NULL;

AllInOneMessage* AllInOneMessage::New() const {
  return new AllInOneMessage;
}

void AllInOneMessage::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    type_ = 0;
    if (has_secretmsg()) {
      if (secretmsg_ != NULL) secretmsg_->::Messages::SecretMessage::Clear();
    }
    if (has_initmsg()) {
      if (initmsg_ != NULL) initmsg_->::Messages::InitialMessage::Clear();
    }
    if (has_msg0()) {
      if (msg0_ != NULL) msg0_->::Messages::MessageMSG0::Clear();
    }
    if (has_msg1()) {
      if (msg1_ != NULL) msg1_->::Messages::MessageMSG1::Clear();
    }
    if (has_msg2()) {
      if (msg2_ != NULL) msg2_->::Messages::MessageMSG2::Clear();
    }
    if (has_msg3()) {
      if (msg3_ != NULL) msg3_->::Messages::MessageMSG3::Clear();
    }
    if (has_attestmsg()) {
      if (attestmsg_ != NULL) attestmsg_->::Messages::AttestationMessage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllInOneMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Messages.AllInOneMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Messages.Type type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Messages::Type_IsValid(value)) {
            set_type(static_cast< ::Messages::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_secretMsg;
        break;
      }

      // optional .Messages.SecretMessage secretMsg = 2;
      case 2: {
        if (tag == 18) {
         parse_secretMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secretmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_initMsg;
        break;
      }

      // optional .Messages.InitialMessage initMsg = 3;
      case 3: {
        if (tag == 26) {
         parse_initMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_initmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_msg0;
        break;
      }

      // optional .Messages.MessageMSG0 msg0 = 4;
      case 4: {
        if (tag == 34) {
         parse_msg0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg0()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_msg1;
        break;
      }

      // optional .Messages.MessageMSG1 msg1 = 5;
      case 5: {
        if (tag == 42) {
         parse_msg1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_msg2;
        break;
      }

      // optional .Messages.MessageMSG2 msg2 = 6;
      case 6: {
        if (tag == 50) {
         parse_msg2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_msg3;
        break;
      }

      // optional .Messages.MessageMSG3 msg3 = 7;
      case 7: {
        if (tag == 58) {
         parse_msg3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_attestMsg;
        break;
      }

      // optional .Messages.AttestationMessage attestMsg = 8;
      case 8: {
        if (tag == 66) {
         parse_attestMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attestmsg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Messages.AllInOneMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Messages.AllInOneMessage)
  return false;
#undef DO_
}

void AllInOneMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Messages.AllInOneMessage)
  // required .Messages.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .Messages.SecretMessage secretMsg = 2;
  if (has_secretmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->secretmsg(), output);
  }

  // optional .Messages.InitialMessage initMsg = 3;
  if (has_initmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->initmsg(), output);
  }

  // optional .Messages.MessageMSG0 msg0 = 4;
  if (has_msg0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->msg0(), output);
  }

  // optional .Messages.MessageMSG1 msg1 = 5;
  if (has_msg1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->msg1(), output);
  }

  // optional .Messages.MessageMSG2 msg2 = 6;
  if (has_msg2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->msg2(), output);
  }

  // optional .Messages.MessageMSG3 msg3 = 7;
  if (has_msg3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->msg3(), output);
  }

  // optional .Messages.AttestationMessage attestMsg = 8;
  if (has_attestmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attestmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Messages.AllInOneMessage)
}

::google::protobuf::uint8* AllInOneMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Messages.AllInOneMessage)
  // required .Messages.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .Messages.SecretMessage secretMsg = 2;
  if (has_secretmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->secretmsg(), target);
  }

  // optional .Messages.InitialMessage initMsg = 3;
  if (has_initmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->initmsg(), target);
  }

  // optional .Messages.MessageMSG0 msg0 = 4;
  if (has_msg0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->msg0(), target);
  }

  // optional .Messages.MessageMSG1 msg1 = 5;
  if (has_msg1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->msg1(), target);
  }

  // optional .Messages.MessageMSG2 msg2 = 6;
  if (has_msg2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->msg2(), target);
  }

  // optional .Messages.MessageMSG3 msg3 = 7;
  if (has_msg3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->msg3(), target);
  }

  // optional .Messages.AttestationMessage attestMsg = 8;
  if (has_attestmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attestmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Messages.AllInOneMessage)
  return target;
}

int AllInOneMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Messages.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .Messages.SecretMessage secretMsg = 2;
    if (has_secretmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->secretmsg());
    }

    // optional .Messages.InitialMessage initMsg = 3;
    if (has_initmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->initmsg());
    }

    // optional .Messages.MessageMSG0 msg0 = 4;
    if (has_msg0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg0());
    }

    // optional .Messages.MessageMSG1 msg1 = 5;
    if (has_msg1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg1());
    }

    // optional .Messages.MessageMSG2 msg2 = 6;
    if (has_msg2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg2());
    }

    // optional .Messages.MessageMSG3 msg3 = 7;
    if (has_msg3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg3());
    }

    // optional .Messages.AttestationMessage attestMsg = 8;
    if (has_attestmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attestmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllInOneMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllInOneMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllInOneMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllInOneMessage::MergeFrom(const AllInOneMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_secretmsg()) {
      mutable_secretmsg()->::Messages::SecretMessage::MergeFrom(from.secretmsg());
    }
    if (from.has_initmsg()) {
      mutable_initmsg()->::Messages::InitialMessage::MergeFrom(from.initmsg());
    }
    if (from.has_msg0()) {
      mutable_msg0()->::Messages::MessageMSG0::MergeFrom(from.msg0());
    }
    if (from.has_msg1()) {
      mutable_msg1()->::Messages::MessageMSG1::MergeFrom(from.msg1());
    }
    if (from.has_msg2()) {
      mutable_msg2()->::Messages::MessageMSG2::MergeFrom(from.msg2());
    }
    if (from.has_msg3()) {
      mutable_msg3()->::Messages::MessageMSG3::MergeFrom(from.msg3());
    }
    if (from.has_attestmsg()) {
      mutable_attestmsg()->::Messages::AttestationMessage::MergeFrom(from.attestmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllInOneMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllInOneMessage::CopyFrom(const AllInOneMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllInOneMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_secretmsg()) {
    if (!this->secretmsg().IsInitialized()) return false;
  }
  if (has_initmsg()) {
    if (!this->initmsg().IsInitialized()) return false;
  }
  if (has_msg0()) {
    if (!this->msg0().IsInitialized()) return false;
  }
  if (has_msg1()) {
    if (!this->msg1().IsInitialized()) return false;
  }
  if (has_msg2()) {
    if (!this->msg2().IsInitialized()) return false;
  }
  if (has_msg3()) {
    if (!this->msg3().IsInitialized()) return false;
  }
  if (has_attestmsg()) {
    if (!this->attestmsg().IsInitialized()) return false;
  }
  return true;
}

void AllInOneMessage::Swap(AllInOneMessage* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(secretmsg_, other->secretmsg_);
    std::swap(initmsg_, other->initmsg_);
    std::swap(msg0_, other->msg0_);
    std::swap(msg1_, other->msg1_);
    std::swap(msg2_, other->msg2_);
    std::swap(msg3_, other->msg3_);
    std::swap(attestmsg_, other->attestmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllInOneMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllInOneMessage_descriptor_;
  metadata.reflection = AllInOneMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Messages

// @@protoc_insertion_point(global_scope)
